<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- [ 생성자를 초기화 하는 방법 ] // value를 통해 값을 저장 -->
	<!-- 방법1. Constructor Injection -->
	<!-- 이클래스로 인스턴스를 만들어서 관리해주세요. 인스턴스의 이름은 student1이에요. -->
	<!-- 1) 기본 생성자를 이용하여 Spring Bean 생성 
			 => 필드 : 기본값이 저장 -->
	<bean class="site.itwill05.di.Student" id="student1"/>
	
	<!-- 2) 매개변수가 선언된 생성자를 이용하여 Spring Bean을 생성 
			 => 필드 : 생성자 매개변수에 값을 전달하여 전달된 값을 필드에 저장 // ★Constructor Injection★ : value값을 저장하는 Injection -->
	<bean class="site.itwill05.di.Student" id="student2">
		<!-- constructor-arg : 생성자 매개변수에 값(인스턴스)을 전달하기 위한 엘리먼트 -->
		<!-- 					=> 엘리먼트 갯수만큼 매개변수가 선언된 생성자가 반드시 선언되어 있어야 한다. (에러1) -->
		<!--     				value 속성 : 매개변수에 전달할 값을 속성값으로 설정-->
		<!-- * 주의 * : 전달값은 기본적으로 String 인스턴스로 전달 - 매개변수의 자료형에 따라 자동 형변환(Container가 알아서 해쥼) (에러2)-->
		<!-- 1000이라는 값을 가지고있는 인스턴스가 전달되는것!! => 문자열로 전달되지만 자동형변환 되서 상관없움 -->
		<constructor-arg value="1000"/>
	</bean>
	
	<bean class="site.itwill05.di.Student" id="student3">
		<!-- index 속성 : 매개변수에 전달된 값의 순서를 속성값으로 설정 -->
		<!--  			   => 0부터 1씩 증가되는 값을 속성값으로 사용 -->
		<!-- 위치를 잘 모를때 첫번째 매개변수에 전달해야하는 경우에 사용 , 그렇게 많이는 사용하지 아늠 -->
		<constructor-arg value="꿍다루" index="1"/>
		<constructor-arg value="2000" index="0"/>
		<constructor-arg value="daru@love.you" index="2"/>
	</bean>
	
	
	<!-- 방법2. Setter Injection -->
	<!-- 기본 생성자를 이용하여 Spring Bean 생성 -->
	<!--  => Setter 메소드를 호출하여 필드값 변경 - Setter Injection -->
	<bean class="site.itwill05.di.Student" id="student4">
		<!-- property : 필드이 setter 메소드를 호출하여 필드값을 변경하기 위한 엘리먼트 -->
		<!-- 			 name 속성 : 필드명을 속성값으로 설정 ★필수속성★ => 자동완성 가능 -->
		<property name="num" value="3000"/>
		<property name="name" value="다루띵"/>
		<property name="email" value="daru@love"/>
	</bean>
	
	
	<!-- 방법3. Constructor Injection 과 Setter Injection 동시 사용 가능 -->
	<!-- 매개변수가 두개인 생성자 호출 + setter메소드 호출 -->
	<bean class="site.itwill05.di.Student" id="student5">
		<constructor-arg value="4000"/>
		<constructor-arg value="융다루"/>
		<property name="email" value="yuns@daru.com"/>
	</bean>
	
	
	<!-- 필드의 관계설정하는 방법 // ref를 통해 관계 설정 -->
	<!-- StudentJdbcDAO, StudentServiceImpl 클래스의 인스턴스 등록 -->
	<bean class="site.itwill05.di.StudentJdbcDAO" id="studentJdbcDAO"/>
	<!-- 기본 생성자를 이용하여 Spring Bean 생성 -->
	<!--  => 필드에 null이 저장 즉, StudentJdbcDAO와 관계가 형성된게 아니야 -->
	<!--  => 필드에 null 이 저장되어 있는 경우 필드를 이용하여 호출할 경우 NullPointerException 발생 -->
	<!--  => ★포함관계 미설정★ -->
	<!-- <bean class="site.itwill05.di.StudentServiceImpl" id="studentServiceImpl"/> -->
	
	<!-- 방법1) 매개변수가 선언된 생성자를 이용하여 Spring Bean 생성 -->
	<!--  		=> 생성자를 이용하여 포함(의존)관계 설정 => DI(Dependency Injection) - Constructor Injection (생성자를 이용하여 값이나 인스턴스 주입!!) -->
	<!--  		ref속성 : Spring Bean의 고유값을 속성값으로 설정, Spring Bean의 고유값을 제공하면 Spring Bean을 제공하는 것!!! -->
	<!-- 	
	<bean class="site.itwill05.di.StudentServiceImpl" id="studentServiceImpl">
		<constructor-arg ref="studentJdbcDAO"></constructor-arg>
	</bean>
	 -->
	 
	<!-- 기본 생성자를 이용하여 Spring Bean 생성 -->
	<!-- 방법2) Setter 메소드를 이용하여 포함(의존)관계 설정 - Setter Injection -->
	<!-- 	
	<bean class="site.itwill05.di.StudentServiceImpl" id="studentServiceImpl">
		<property name="sutdentJdbcDAO" ref="studentJdbcDAO"/>
	</bean>
 	-->
 	
 	<!-- 기존의 서비스는 냅두고 부모(인터페이스)로 설정 -->
 	<!-- ref속성값을 변경하여 다른 Spring Bean과의 의존관계가 설정 -->
 	<!--  => 프로그램이 아닌 XML 파일을 이용하여 보다 쉬운 관계 설정 -->
	<bean class="site.itwill05.di.StudentMyBatisDAO" id="studentMyBatisDAO"/>
 	<bean class="site.itwill05.di.StudentServiceImpl" id="studentService">
 		<!-- <property name="studentDAO" ref="studentJdbcDAO"/> -->
 		<property name="studentDAO" ref="studentMyBatisDAO"/>
 	</bean>

</beans>














