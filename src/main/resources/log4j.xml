<?xml version="1.0" encoding="UTF-8"?>
<!-- 경고 : 자동완성 기능 사용하지 못하므로 경로 다시 재설정 => 이클립스에 내부적으로 저장됨 -->
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN"
	 "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<!-- log4j : 장치에 기록(로그)을 제공하는 프로그램 -->
<!--          => log4j.xml 파일을 이용하여 기록 관련 정보 설정 -->
<!-- log4j:configuration - dtd파일이 가지고 있는 모든 엘리먼트는 configuration에서 사용가능하다라고 알려쥬는것 -->
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	
	<!-- Appenders -->
	<!-- appender : 로그 전달 방식(로그매체)과 로그 형식을 설정하기 위한 엘리먼트 -->
	<!-- 			name 속성 : 기록자(Appender-기록을 지우는 것이 아니고 추가)의 고유값을 속성값으로 설정 -->
	<!-- 		   class 속성 : Appender 인터페이스를 상속 받은 로그 매체 관련 클래스를 속성값으로 설정 -->
	<!--                         => "http://logging.apache.org/log4j/1.2/apidocs/" 페이지 참조 - 인터페이스나 클래스에 대한 정보 제공 -->
	<!-- 							 ConsoleAppender : Console에 기록 - 로그매체 : 콘솔 - 기록안남음... -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<!-- param : 상위 엘리먼트에게 필요한 정보를 제공하기 위한 엘리먼트 -->
		<!--          => ConsoleAppender 클래스에게 [Target] 이름으로 출력스트림(System.out) 제공 -->
		<!--         name 속성 : appender의 class속성의 클래스가 필요한 정보를 제공해야함 => 정해져 있는 값이 있다.  -->
		<param name="Target" value="System.out" />
		<!-- layout : 로그 형식을 설정 하기 위한 엘리먼트 -->
		<!-- 		  class 속성 : 로그 형식 관련 클래스를 속성값으로 설정 -->
		<layout class="org.apache.log4j.PatternLayout">
			<!-- param 엘리먼트를 이용하여 로그 형식 설정 -->
			<!--  => value 속성값으로 Conversion Character 사용 -->
			<!-- 
				     %c : 패키지가 포함된 클래스명을 기록 - {정수값}을 이용하여 원하는 형식으로 변환 가능
				           => ex) %c{1} : 패키지명을 제외한 클래스명만 기록
				           => ex) %c{2} : 클래스명과 클래스명 앞의 패키지까지 기록 
				           
					 %d : 날짜와 시간을 기록 - {SimpleDateFormat}을 이용하여 원하는 형식으로 변환 가능	
					 	   => ex) %d{yyyy-MM-dd} : [년-월-일] 형식으로 날짜 기록
					 	   => 콘솔은 바로 사라져 상관없지만 파일에는 거의 필수!!!
					 	   
					 %m : 로그 메세지를 기록(logger인스턴스를 이용하여 이럴때 기록해줘!!!)
					 
					 %M : 호출 메소드명을 기록(어떤 메소드가 호출되서 동작되었니?)
					 
					 %n : 엔터 기록 - 로그 줄바꿈(밑으로내려가라!)
					 
					 %p : 로그이벤트 기록(어떤 상황일 때 기록해주세요)
					       => [로그이벤트] 기록을 많이 남기는 순서 (이벤트가 발생할 때마다 기록됨)
					       				   기록을 많이 남길수록 하위레벨 !!
					          TRACE(무조건 전부기록, 상위레벨로 올라갈수록 로그레벨도 높아짐) > DEBUG(많이사용) > INFO(정보를 제공할 때 사용) > WARN > ERROR > FATAL
					 
					 %r : 처리 시간 기록 (어떤 클래스안에 있는 어떤 메소드가 처리되는 시간을 알랴쥼)
					 
					 %t : 처리 스레드명 기록(어떤 스레드로 처리가 되었는지)

			 -->
			<!-- Conversion Character에 자릿수 설정 가능 -->
			<!--  =>        %p : 로그이벤트의 길이 만큼 자릿수 제공 -->
			<!--  =>  %자릿수p : 로그이벤트의 최대 자릿수를 설정하여 제공(오른쪽 정렬) -->
			<!--  => %.자릿수p : 로그이벤트의 최소 자릿수를 설정하여 제공(오른쪽 정렬) -->
			<!--  => %-자릿수p : 로그이벤트의 최대 자릿수를 설정하여 제공(왼쪽 정렬) -->
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	
	<!-- Log4HelloWorldApp.java 의 로그 출력가능하도록 설정 -->
	<appender name="example" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%c{1} 클래스의 %M 메소드 - %m%n" />
		</layout>
	</appender>
	
	<!-- 파일에 기록을 남기는 로그 출력가능하도록 설정 -->
	<appender name="dailyLogFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="daily.log" />
		<param name="DatePattern" value=".yyyy-MM-dd"/>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{HH:mm:ss}]%-5p: %c -%m%n" />
		</layout>
	</appender>
	
	<logger name="site.itwill00.log" additivity="false">
		<level value="info"/>
		<appender-ref ref="example"/>
		<appender-ref ref="dailyLogFile"/>
	</logger>
	
	
	
	<!-- 언제 기록이 되는지를 설정하는 엘리먼트들이 존재 -->
	<!-- Application Loggers -->
	<!-- logger : 기록자(Appender)를 이용한 로그를 구현하기 위한 엘리먼트 -->
	<!-- 		   =>패키지안의 클래스가 인스턴스를 만들어서 메소드가 호출된다면 기록해주세요~ -->
	<!-- 		   name 속성 : 기록자가 구현될 특정 패키지 경로를 속성값으로 설정 -->
	<!--     additivity 속성 : false 또는 true(기본)를 속성값으로 설정 -->
	<!-- 						=> flase : root Logger에 정보를 전달받지 않고 설정 -->
	<!-- 						=>  true : root Logger에 정보를 전달받아 설정 -->
	<logger name="site.itwill.controller" additivity="false">
		<!-- level : 로그이벤트를 설정하기 위한 엘리먼트
					  value 속성 : info레벨 이상의 이벤트가 발생했을 때!! -->
		<level value="info" />
		<!-- appender-ref : 기록자를 설정하기 위한 엘리먼트 -->
		<!--                ref 속성 : appender 엘리먼트의 고유값을 속성값으로 설정 -->
		<!-- 기록이 두번될 경우 상속을 받지 않는 경우도 있음 logger 에 additivity속성 이용  -->
		<!-- <appender-ref ref="console"/> -->
	</logger>
	
	<!-- 3rdparty Loggers -->
	<!-- 라이브러리가 특정패키지로 되어있거든 그래서, -->
	<!-- Core,beans,context,web 라이브러리 안에있는 클래스들이 동작할 때 기록해줘요. -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	
	<!-- info레벨되면 기록 appender는 root거 사용 -->
	<logger name="site.itwill07.aop">
		<level value="info"/>
	</logger>
	
	
	<logger name="site.itwill10.controller">
		<level value="info"/>
	</logger>
	
	<!-- MyBatis log라이브러리 등록 >> log프로퍼티 작성 >> root-context.xml 수정 하고 온것 -->
	<!-- MyBatis 로그 -->
	<!-- jdbc.sqlonly : 완성된 SQL명령을 기록(하겠다) -->
	<logger name="jdbc.sqlonly">
		<level value="info"/>
	</logger>
	
	<!-- jdbc.sqltiming : SQL 명령에 대한 실행시간(ms단위)을 기록 -->
	<logger name="jdbc.sqltiming">
		<level value="info"/>
	</logger>	
	
	<!-- jdbc.audit : ResultSet 관련 정보를 제외한 모든 JDBC관련 정보 기록 -->
	<logger name="jdbc.audit">
		<level value="info"/>
	</logger>

	<!-- jdbc.resultSet : ResultSet 관련 정보를 포함한 모든 JDBC관련 정보를 기록 -->
	<!-- 
	<logger name="jdbc.resultSet">
		<level value="info"/>
	</logger>	
	-->
	 
	 <!-- jdbc.resultsettable : ResultSet 관련 정보를 테이블 형식으로 기록 -->
	<logger name="jdbc.resultsettable">
		<level value="info"/>
	</logger>		 

	<!-- jdbc.connection : Connection 관련 정보 기록 - Connection의 Open 기록 & Close 기록 -->
	<logger name="jdbc.connection">
		<level value="info"/>
	</logger>		
	
	<!-- Root Logger -->
	<!-- root : 최상위 Logger를 설정하기 위한 엘리먼트 -->
	<!-- 	     => 모든 패키지에 기본적으로 적용되는 Logger -->
	<!-- 	     => 모든 logger 엘리먼트에 Logger 정보 제공 -->
	<!--  -->
	<root>
		<!-- priority : 기본 로그이벤트를 설정하기 위한 엘리먼트 -->
		<!-- 			 => logger엘리먼트에 level 엘리먼트가 있는 경우 미적용(logger에는 하위엘리먼트 작성) >> level이 더 상위임~ -->
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>

















