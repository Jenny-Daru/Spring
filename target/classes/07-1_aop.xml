<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- aop라는 namespace 통해 AOP기능 이용 -->	

	<!-- 핵심관심모듈(DAO와Service 클래스)을 Spring Bean으로 등록 -->
	<bean class="site.itwill07.aop.StudentDAOImpl" id="studentDAO"/>
	<bean class="site.itwill07.aop.StudentServiceImpl" id="studentService">
		<property name="studentDAO" ref="studentDAO"/>
	</bean>
	
	<!-- 횡단관심모듈(Advice 클래스)을 Srping Bean으로 등록 -->
	<!-- 핵심 + 횡단 합쳐야함(weaving) >> 프로그램(프로젝트안에 라이브러리) 필요 >> 여기없다. >> 라이브러리 추가 >> 메이븐 이용 >> aop 엘리먼트 이용 가능 -->
	<bean class="site.itwill07.aop.StudentAdvice" id="studentAdvice"/>
	
	<!-- config : Spring AOP(AspectJ) 기능을 구현하기 위한 상위 엘리먼트 -->
	<aop:config>
		<!-- Aspect안에서 Joinpoint에서 pointcut을 설정해야하는데 pointcut중복될수 있음 >> 중복을 최소화 하기위한 엘리먼트 -->
		<!-- pointcut : PointCut을 설정하기 위한 엘리먼트
						=> WHY?? PointCut설정을 재사용하여 유지보수의 효율성 증가 -->
		<!-- 			expression 속성 : 핵심관심코드가 선언된 메소드(target메소드)에 대한 정보를 속성값으로 설정 -->
		<!-- 필수는 아니고! aspect에서 좀더 쉽게 pointcut설정 가능 -->
		<aop:pointcut expression="execution(* *(..))" id="studentPointCut"/>
	
		<!-- ★aspect★ : 핵심관심모듈(PointCut)에 횡단관심모듈(Advice)을 원하는 위치(JoinPoint)에 삽입되어 실행되도록 설정하는 엘리먼트 -->
		<!-- 			  AspectJ Weaver를 이용하여 AspectJ 기능의 모듈(Proxy)을 생성하여 실행되도록 설정하는 엘리먼트
						  ★우선, 어떤 Advice를 가져다 사용할 것인지를 먼저 설정하는것이 중요!!!★ -->
		<!-- 		      aspect를 이용하면 핵심관심코드에 횡단관심모듈이 삽입되어 Proxy클래스(가상의 클래스)가 내부적으로 만들어짐 >> 결국 Proxy를 통해 동작되는것 -->
		<!-- 		      ref속성 : 횡단관심모듈에 대한 Spring Bean의 beanName을 속성값으로 설정
									studentAdvice 얘를 가져다가 삽입해쥬께요~ ,공통적인  코드를 가지고 있는 클래스를 가져다 사용할게요!  -->				 
		<aop:aspect ref="studentAdvice">
			<!-- before : 핵심관심코드 전에 횡단관심코드를 삽입하기 위한 엘리먼트 => JoinPoint -->
			<!-- 		  method속성 : 횡단관심코드가 선언된 메소드명을 속성값으로 설정, 메소드 단위로 삽입 -->
			<!-- 		pointcut속성 : 핵심관심코드가 선언된 메소드(target메소드)에 대한 정보를 속성값으로 설정,
									   ★어떤클래스안에있는 어떤메소드를 호출할때를 표현해줘야해★                -->
			<!-- 					    => excution 속성값 : Spring Bean으로 등록된 클래스의 메소드를 PointCut 표현식을 이용하여 메소드 정보 제공
															 핵심관심모듈 중 여러개의 핵심코드 존재 >> 그중에 하나(메소드)를 지정하여 사용 -->							
			<!-- 					    =>   within 속성값 : Spring Bean으로 등록된 클래스를 이용하여 설정
															 어떤클래스를 호출할 메소드들 >> 모든 메소드가 핵심관심코드 >> 모듈자체가 통째로 동작될때 -->	
															 						
			<!-- [ excution 속성값을 이용하여 메소드를 설정하는 방법 ]  -->
			<!-- PointCut 표현식 사용 방법
				 형식 : excution( "[접근지정자] 반환형 [패키지.클래스명.]메소드명(매개변수의 자료형,..)" ) ★반환형과 자료형은 필수★ 
						 => ""이런메소드가 호출될 때, 어떤클래스에 존재하는지 모룸 >> 클래스명과 패키지명 입력
						     []생략가능 , SpringBean으로 등록된 모든 클래스가 호출될 때!!
							 PointCut 표현식에서는 인터페이스를 이용하여 자식클래스의 메소드 설정 가능
						★반환형,메소드명,자료형을 일종의 Pattern형식으로 사용가능★   
						 => PointCut표현식의 패턴기호 3가지 :   ..(0개이상,0개포함),  *(1개이상,0개안댐),  +(0개또는1개)   
						 =>   PointCut표현식의 연산자 3가지 : !(NoT), &&(AND), ||(OR)
						    
						반환형 메소드명 자료형 : SpringBean으로 등록된 모든메소드가 호출된다면 execution(* *(..))" 전에 beforeLog가 삽입되겠다.  -->	
						<!-- <aop:before method="beforeLog" pointcut="execution(* *(..))" /> -->
							
			<!-- pointcut-ref 속성 : pointcut 엘리먼트의 고유값을 속성값으로 설정 -->				
			<aop:before method="beforeLog" pointcut-ref="studentPointCut"/>
			
			<!-- after : 핵심관심코드 뒤에 횡단관심코드를 무조건 삽입하기 위한 엘리먼트 => JoinPoint -->
			<!-- [ within 속성값을 이용하여 메소드를 설정하는 방법 ]  -->
			<!-- within 속성값으로 클래스의 모든 메소드를 타겟 메소드로 설정 가능
				 => 클래스를 표현하여 클래스의 모든 메소드를 타겟 메소드로 설정
				 => 클래스를 표현할 때 패턴기호 사용 가능 >> 패키지명.* >> 모든클래스 가능하지만 비권장! >> 직접 클래스명 지정바람
				 ★주의점★ 인터페이스를 이용하여 타겟 메소드 설정 불가능!! -->
			<aop:after method="afterLog" pointcut="within(site.itwill07.aop.StudentServiceImpl)"/>
			
			<!-- after-returning : 핵심관심코드에 예외가 없는 경우 핵심관심코드 뒤에 횡단관심코드를 삽입하기 위한 엘리먼트  -->
			<aop:after-returning method="afterReturningLog" pointcut="execution(* site.itwill07.aop.StudentService.*(int))" />
			
			<!-- after-throwing : 핵심관심코드 실행시 예외가 있는 경우 예외 뒤에 횡단관심코드를 삽입하기 위한 엘리먼트  -->
			<!-- 매개변수는 String인식 못해 !! 매개변수의 자료형이 클래스인 경우 >> 패키지명.클래스명(해당 자료형의 클래스) 패키지명 포함되게해야함  -->
			<aop:after-throwing method="afterThrowingLog" pointcut="execution(void *(site.itwill07.aop.Student))" />
			
			<!-- 반환형 상관없이 getStudentList()가 target메소드가 되고, 이 메소드가 호출될때 arround 삽입 -->
			<!-- around : 핵심관심코드 실행 전 또는 실행 후에 횡단관심코드를 삽입하기위한 엘리먼트 => JoinPoint -->
			<aop:around method="arround" pointcut="execution(* getStudentList())"/>
			
		</aop:aspect>
	</aop:config>

</beans>












